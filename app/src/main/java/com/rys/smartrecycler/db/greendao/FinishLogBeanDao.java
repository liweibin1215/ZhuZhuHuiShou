package com.rys.smartrecycler.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rys.smartrecycler.db.retbean.FinishLogBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FINISH_LOG_BEAN".
*/
public class FinishLogBeanDao extends AbstractDao<FinishLogBean, Long> {

    public static final String TABLENAME = "FINISH_LOG_BEAN";

    /**
     * Properties of entity FinishLogBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property LogType = new Property(1, int.class, "logType", false, "LOG_TYPE");
        public final static Property LogName = new Property(2, String.class, "logName", false, "LOG_NAME");
        public final static Property LogDesc = new Property(3, String.class, "logDesc", false, "LOG_DESC");
        public final static Property CreateTime = new Property(4, String.class, "createTime", false, "CREATE_TIME");
        public final static Property Upflag = new Property(5, int.class, "upflag", false, "UPFLAG");
    }


    public FinishLogBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FinishLogBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FINISH_LOG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"LOG_TYPE\" INTEGER NOT NULL ," + // 1: logType
                "\"LOG_NAME\" TEXT," + // 2: logName
                "\"LOG_DESC\" TEXT," + // 3: logDesc
                "\"CREATE_TIME\" TEXT," + // 4: createTime
                "\"UPFLAG\" INTEGER NOT NULL );"); // 5: upflag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FINISH_LOG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FinishLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLogType());
 
        String logName = entity.getLogName();
        if (logName != null) {
            stmt.bindString(3, logName);
        }
 
        String logDesc = entity.getLogDesc();
        if (logDesc != null) {
            stmt.bindString(4, logDesc);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
        stmt.bindLong(6, entity.getUpflag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FinishLogBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getLogType());
 
        String logName = entity.getLogName();
        if (logName != null) {
            stmt.bindString(3, logName);
        }
 
        String logDesc = entity.getLogDesc();
        if (logDesc != null) {
            stmt.bindString(4, logDesc);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(5, createTime);
        }
        stmt.bindLong(6, entity.getUpflag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FinishLogBean readEntity(Cursor cursor, int offset) {
        FinishLogBean entity = new FinishLogBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // logType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // logName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // logDesc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // createTime
            cursor.getInt(offset + 5) // upflag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FinishLogBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLogType(cursor.getInt(offset + 1));
        entity.setLogName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLogDesc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreateTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpflag(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FinishLogBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FinishLogBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FinishLogBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
