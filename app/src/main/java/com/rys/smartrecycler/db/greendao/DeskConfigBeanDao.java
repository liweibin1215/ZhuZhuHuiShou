package com.rys.smartrecycler.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rys.smartrecycler.db.retbean.DeskConfigBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DESK_CONFIG_BEAN".
*/
public class DeskConfigBeanDao extends AbstractDao<DeskConfigBean, Long> {

    public static final String TABLENAME = "DESK_CONFIG_BEAN";

    /**
     * Properties of entity DeskConfigBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ServerId = new Property(1, int.class, "serverId", false, "SERVER_ID");
        public final static Property DeskType = new Property(2, int.class, "deskType", false, "DESK_TYPE");
        public final static Property DeskName = new Property(3, String.class, "deskName", false, "DESK_NAME");
        public final static Property DeskNo = new Property(4, int.class, "deskNo", false, "DESK_NO");
        public final static Property FullMin = new Property(5, int.class, "fullMin", false, "FULL_MIN");
        public final static Property UnitPrice = new Property(6, String.class, "unitPrice", false, "UNIT_PRICE");
        public final static Property BottleNum = new Property(7, String.class, "bottleNum", false, "BOTTLE_NUM");
        public final static Property TotalWeigth = new Property(8, String.class, "totalWeigth", false, "TOTAL_WEIGTH");
        public final static Property TotalMoney = new Property(9, String.class, "totalMoney", false, "TOTAL_MONEY");
        public final static Property Percent = new Property(10, int.class, "percent", false, "PERCENT");
        public final static Property Upflag = new Property(11, int.class, "upflag", false, "UPFLAG");
        public final static Property FullStatus = new Property(12, int.class, "fullStatus", false, "FULL_STATUS");
        public final static Property LockStatus = new Property(13, int.class, "lockStatus", false, "LOCK_STATUS");
        public final static Property ErrorStatus = new Property(14, String.class, "errorStatus", false, "ERROR_STATUS");
        public final static Property UpdateTime = new Property(15, String.class, "updateTime", false, "UPDATE_TIME");
    }


    public DeskConfigBeanDao(DaoConfig config) {
        super(config);
    }
    
    public DeskConfigBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DESK_CONFIG_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"SERVER_ID\" INTEGER NOT NULL ," + // 1: serverId
                "\"DESK_TYPE\" INTEGER NOT NULL ," + // 2: deskType
                "\"DESK_NAME\" TEXT," + // 3: deskName
                "\"DESK_NO\" INTEGER NOT NULL UNIQUE ," + // 4: deskNo
                "\"FULL_MIN\" INTEGER NOT NULL ," + // 5: fullMin
                "\"UNIT_PRICE\" TEXT," + // 6: unitPrice
                "\"BOTTLE_NUM\" TEXT," + // 7: bottleNum
                "\"TOTAL_WEIGTH\" TEXT," + // 8: totalWeigth
                "\"TOTAL_MONEY\" TEXT," + // 9: totalMoney
                "\"PERCENT\" INTEGER NOT NULL ," + // 10: percent
                "\"UPFLAG\" INTEGER NOT NULL ," + // 11: upflag
                "\"FULL_STATUS\" INTEGER NOT NULL ," + // 12: fullStatus
                "\"LOCK_STATUS\" INTEGER NOT NULL ," + // 13: lockStatus
                "\"ERROR_STATUS\" TEXT," + // 14: errorStatus
                "\"UPDATE_TIME\" TEXT);"); // 15: updateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DESK_CONFIG_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DeskConfigBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getServerId());
        stmt.bindLong(3, entity.getDeskType());
 
        String deskName = entity.getDeskName();
        if (deskName != null) {
            stmt.bindString(4, deskName);
        }
        stmt.bindLong(5, entity.getDeskNo());
        stmt.bindLong(6, entity.getFullMin());
 
        String unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindString(7, unitPrice);
        }
 
        String bottleNum = entity.getBottleNum();
        if (bottleNum != null) {
            stmt.bindString(8, bottleNum);
        }
 
        String totalWeigth = entity.getTotalWeigth();
        if (totalWeigth != null) {
            stmt.bindString(9, totalWeigth);
        }
 
        String totalMoney = entity.getTotalMoney();
        if (totalMoney != null) {
            stmt.bindString(10, totalMoney);
        }
        stmt.bindLong(11, entity.getPercent());
        stmt.bindLong(12, entity.getUpflag());
        stmt.bindLong(13, entity.getFullStatus());
        stmt.bindLong(14, entity.getLockStatus());
 
        String errorStatus = entity.getErrorStatus();
        if (errorStatus != null) {
            stmt.bindString(15, errorStatus);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(16, updateTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DeskConfigBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getServerId());
        stmt.bindLong(3, entity.getDeskType());
 
        String deskName = entity.getDeskName();
        if (deskName != null) {
            stmt.bindString(4, deskName);
        }
        stmt.bindLong(5, entity.getDeskNo());
        stmt.bindLong(6, entity.getFullMin());
 
        String unitPrice = entity.getUnitPrice();
        if (unitPrice != null) {
            stmt.bindString(7, unitPrice);
        }
 
        String bottleNum = entity.getBottleNum();
        if (bottleNum != null) {
            stmt.bindString(8, bottleNum);
        }
 
        String totalWeigth = entity.getTotalWeigth();
        if (totalWeigth != null) {
            stmt.bindString(9, totalWeigth);
        }
 
        String totalMoney = entity.getTotalMoney();
        if (totalMoney != null) {
            stmt.bindString(10, totalMoney);
        }
        stmt.bindLong(11, entity.getPercent());
        stmt.bindLong(12, entity.getUpflag());
        stmt.bindLong(13, entity.getFullStatus());
        stmt.bindLong(14, entity.getLockStatus());
 
        String errorStatus = entity.getErrorStatus();
        if (errorStatus != null) {
            stmt.bindString(15, errorStatus);
        }
 
        String updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindString(16, updateTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DeskConfigBean readEntity(Cursor cursor, int offset) {
        DeskConfigBean entity = new DeskConfigBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // serverId
            cursor.getInt(offset + 2), // deskType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deskName
            cursor.getInt(offset + 4), // deskNo
            cursor.getInt(offset + 5), // fullMin
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // unitPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // bottleNum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // totalWeigth
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // totalMoney
            cursor.getInt(offset + 10), // percent
            cursor.getInt(offset + 11), // upflag
            cursor.getInt(offset + 12), // fullStatus
            cursor.getInt(offset + 13), // lockStatus
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // errorStatus
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // updateTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DeskConfigBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setServerId(cursor.getInt(offset + 1));
        entity.setDeskType(cursor.getInt(offset + 2));
        entity.setDeskName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDeskNo(cursor.getInt(offset + 4));
        entity.setFullMin(cursor.getInt(offset + 5));
        entity.setUnitPrice(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBottleNum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTotalWeigth(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTotalMoney(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPercent(cursor.getInt(offset + 10));
        entity.setUpflag(cursor.getInt(offset + 11));
        entity.setFullStatus(cursor.getInt(offset + 12));
        entity.setLockStatus(cursor.getInt(offset + 13));
        entity.setErrorStatus(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUpdateTime(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DeskConfigBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DeskConfigBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DeskConfigBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
