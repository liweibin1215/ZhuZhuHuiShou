package com.rys.smartrecycler.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rys.smartrecycler.db.retbean.UserOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_ORDER".
*/
public class UserOrderDao extends AbstractDao<UserOrder, Long> {

    public static final String TABLENAME = "USER_ORDER";

    /**
     * Properties of entity UserOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderNo = new Property(1, String.class, "orderNo", false, "ORDER_NO");
        public final static Property DeviceSn = new Property(2, String.class, "deviceSn", false, "DEVICE_SN");
        public final static Property DeskType = new Property(3, int.class, "deskType", false, "DESK_TYPE");
        public final static Property DeskNo = new Property(4, int.class, "deskNo", false, "DESK_NO");
        public final static Property UserId = new Property(5, int.class, "userId", false, "USER_ID");
        public final static Property UserPhone = new Property(6, String.class, "userPhone", false, "USER_PHONE");
        public final static Property RecycleSum = new Property(7, String.class, "recycleSum", false, "RECYCLE_SUM");
        public final static Property RecycleMoney = new Property(8, String.class, "recycleMoney", false, "RECYCLE_MONEY");
        public final static Property CreateTime = new Property(9, long.class, "createTime", false, "CREATE_TIME");
        public final static Property Upflag = new Property(10, int.class, "upflag", false, "UPFLAG");
    }


    public UserOrderDao(DaoConfig config) {
        super(config);
    }
    
    public UserOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ORDER_NO\" TEXT," + // 1: orderNo
                "\"DEVICE_SN\" TEXT," + // 2: deviceSn
                "\"DESK_TYPE\" INTEGER NOT NULL ," + // 3: deskType
                "\"DESK_NO\" INTEGER NOT NULL ," + // 4: deskNo
                "\"USER_ID\" INTEGER NOT NULL ," + // 5: userId
                "\"USER_PHONE\" TEXT," + // 6: userPhone
                "\"RECYCLE_SUM\" TEXT," + // 7: recycleSum
                "\"RECYCLE_MONEY\" TEXT," + // 8: recycleMoney
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 9: createTime
                "\"UPFLAG\" INTEGER NOT NULL );"); // 10: upflag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
 
        String deviceSn = entity.getDeviceSn();
        if (deviceSn != null) {
            stmt.bindString(3, deviceSn);
        }
        stmt.bindLong(4, entity.getDeskType());
        stmt.bindLong(5, entity.getDeskNo());
        stmt.bindLong(6, entity.getUserId());
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(7, userPhone);
        }
 
        String recycleSum = entity.getRecycleSum();
        if (recycleSum != null) {
            stmt.bindString(8, recycleSum);
        }
 
        String recycleMoney = entity.getRecycleMoney();
        if (recycleMoney != null) {
            stmt.bindString(9, recycleMoney);
        }
        stmt.bindLong(10, entity.getCreateTime());
        stmt.bindLong(11, entity.getUpflag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserOrder entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(2, orderNo);
        }
 
        String deviceSn = entity.getDeviceSn();
        if (deviceSn != null) {
            stmt.bindString(3, deviceSn);
        }
        stmt.bindLong(4, entity.getDeskType());
        stmt.bindLong(5, entity.getDeskNo());
        stmt.bindLong(6, entity.getUserId());
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(7, userPhone);
        }
 
        String recycleSum = entity.getRecycleSum();
        if (recycleSum != null) {
            stmt.bindString(8, recycleSum);
        }
 
        String recycleMoney = entity.getRecycleMoney();
        if (recycleMoney != null) {
            stmt.bindString(9, recycleMoney);
        }
        stmt.bindLong(10, entity.getCreateTime());
        stmt.bindLong(11, entity.getUpflag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserOrder readEntity(Cursor cursor, int offset) {
        UserOrder entity = new UserOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderNo
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceSn
            cursor.getInt(offset + 3), // deskType
            cursor.getInt(offset + 4), // deskNo
            cursor.getInt(offset + 5), // userId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // recycleSum
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // recycleMoney
            cursor.getLong(offset + 9), // createTime
            cursor.getInt(offset + 10) // upflag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserOrder entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderNo(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceSn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeskType(cursor.getInt(offset + 3));
        entity.setDeskNo(cursor.getInt(offset + 4));
        entity.setUserId(cursor.getInt(offset + 5));
        entity.setUserPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRecycleSum(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRecycleMoney(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreateTime(cursor.getLong(offset + 9));
        entity.setUpflag(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserOrder entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserOrder entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserOrder entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
