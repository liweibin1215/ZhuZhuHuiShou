package com.rys.smartrecycler.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rys.smartrecycler.db.retbean.SystemSetBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SYSTEM_SET_BEAN".
*/
public class SystemSetBeanDao extends AbstractDao<SystemSetBean, Long> {

    public static final String TABLENAME = "SYSTEM_SET_BEAN";

    /**
     * Properties of entity SystemSetBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KeyName = new Property(1, String.class, "keyName", false, "KEY_NAME");
        public final static Property KeyValue = new Property(2, String.class, "keyValue", false, "KEY_VALUE");
        public final static Property KeyParas = new Property(3, String.class, "keyParas", false, "KEY_PARAS");
        public final static Property Upflag = new Property(4, int.class, "upflag", false, "UPFLAG");
    }


    public SystemSetBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SystemSetBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_SET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KEY_NAME\" TEXT UNIQUE ," + // 1: keyName
                "\"KEY_VALUE\" TEXT," + // 2: keyValue
                "\"KEY_PARAS\" TEXT," + // 3: keyParas
                "\"UPFLAG\" INTEGER NOT NULL );"); // 4: upflag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_SET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SystemSetBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String keyName = entity.getKeyName();
        if (keyName != null) {
            stmt.bindString(2, keyName);
        }
 
        String keyValue = entity.getKeyValue();
        if (keyValue != null) {
            stmt.bindString(3, keyValue);
        }
 
        String keyParas = entity.getKeyParas();
        if (keyParas != null) {
            stmt.bindString(4, keyParas);
        }
        stmt.bindLong(5, entity.getUpflag());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SystemSetBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String keyName = entity.getKeyName();
        if (keyName != null) {
            stmt.bindString(2, keyName);
        }
 
        String keyValue = entity.getKeyValue();
        if (keyValue != null) {
            stmt.bindString(3, keyValue);
        }
 
        String keyParas = entity.getKeyParas();
        if (keyParas != null) {
            stmt.bindString(4, keyParas);
        }
        stmt.bindLong(5, entity.getUpflag());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SystemSetBean readEntity(Cursor cursor, int offset) {
        SystemSetBean entity = new SystemSetBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // keyName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // keyValue
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // keyParas
            cursor.getInt(offset + 4) // upflag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SystemSetBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKeyName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setKeyValue(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKeyParas(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpflag(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SystemSetBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SystemSetBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SystemSetBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
