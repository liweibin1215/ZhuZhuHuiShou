package com.rys.smartrecycler.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rys.smartrecycler.db.retbean.AdvInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ADV_INFO".
*/
public class AdvInfoDao extends AbstractDao<AdvInfo, Long> {

    public static final String TABLENAME = "ADV_INFO";

    /**
     * Properties of entity AdvInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AdvId = new Property(1, int.class, "advId", false, "ADV_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Img = new Property(3, String.class, "img", false, "IMG");
        public final static Property ImgPath = new Property(4, String.class, "imgPath", false, "IMG_PATH");
        public final static Property Video = new Property(5, String.class, "video", false, "VIDEO");
        public final static Property VideoPath = new Property(6, String.class, "videoPath", false, "VIDEO_PATH");
        public final static Property Start_time = new Property(7, String.class, "start_time", false, "START_TIME");
        public final static Property End_time = new Property(8, String.class, "end_time", false, "END_TIME");
        public final static Property Create_at = new Property(9, String.class, "create_at", false, "CREATE_AT");
        public final static Property Update_at = new Property(10, String.class, "update_at", false, "UPDATE_AT");
        public final static Property Upflag = new Property(11, int.class, "upflag", false, "UPFLAG");
        public final static Property ErrorTimes = new Property(12, int.class, "errorTimes", false, "ERROR_TIMES");
        public final static Property LastDownloadImg = new Property(13, String.class, "lastDownloadImg", false, "LAST_DOWNLOAD_IMG");
        public final static Property Type = new Property(14, int.class, "type", false, "TYPE");
    }


    public AdvInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AdvInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ADV_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ADV_ID\" INTEGER NOT NULL ," + // 1: advId
                "\"NAME\" TEXT," + // 2: name
                "\"IMG\" TEXT," + // 3: img
                "\"IMG_PATH\" TEXT," + // 4: imgPath
                "\"VIDEO\" TEXT," + // 5: video
                "\"VIDEO_PATH\" TEXT," + // 6: videoPath
                "\"START_TIME\" TEXT," + // 7: start_time
                "\"END_TIME\" TEXT," + // 8: end_time
                "\"CREATE_AT\" TEXT," + // 9: create_at
                "\"UPDATE_AT\" TEXT," + // 10: update_at
                "\"UPFLAG\" INTEGER NOT NULL ," + // 11: upflag
                "\"ERROR_TIMES\" INTEGER NOT NULL ," + // 12: errorTimes
                "\"LAST_DOWNLOAD_IMG\" TEXT," + // 13: lastDownloadImg
                "\"TYPE\" INTEGER NOT NULL );"); // 14: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ADV_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AdvInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAdvId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(5, imgPath);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(6, video);
        }
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(7, videoPath);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(8, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(9, end_time);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(10, create_at);
        }
 
        String update_at = entity.getUpdate_at();
        if (update_at != null) {
            stmt.bindString(11, update_at);
        }
        stmt.bindLong(12, entity.getUpflag());
        stmt.bindLong(13, entity.getErrorTimes());
 
        String lastDownloadImg = entity.getLastDownloadImg();
        if (lastDownloadImg != null) {
            stmt.bindString(14, lastDownloadImg);
        }
        stmt.bindLong(15, entity.getType());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AdvInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAdvId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(4, img);
        }
 
        String imgPath = entity.getImgPath();
        if (imgPath != null) {
            stmt.bindString(5, imgPath);
        }
 
        String video = entity.getVideo();
        if (video != null) {
            stmt.bindString(6, video);
        }
 
        String videoPath = entity.getVideoPath();
        if (videoPath != null) {
            stmt.bindString(7, videoPath);
        }
 
        String start_time = entity.getStart_time();
        if (start_time != null) {
            stmt.bindString(8, start_time);
        }
 
        String end_time = entity.getEnd_time();
        if (end_time != null) {
            stmt.bindString(9, end_time);
        }
 
        String create_at = entity.getCreate_at();
        if (create_at != null) {
            stmt.bindString(10, create_at);
        }
 
        String update_at = entity.getUpdate_at();
        if (update_at != null) {
            stmt.bindString(11, update_at);
        }
        stmt.bindLong(12, entity.getUpflag());
        stmt.bindLong(13, entity.getErrorTimes());
 
        String lastDownloadImg = entity.getLastDownloadImg();
        if (lastDownloadImg != null) {
            stmt.bindString(14, lastDownloadImg);
        }
        stmt.bindLong(15, entity.getType());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public AdvInfo readEntity(Cursor cursor, int offset) {
        AdvInfo entity = new AdvInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // advId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // imgPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // video
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // videoPath
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // start_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // end_time
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // create_at
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // update_at
            cursor.getInt(offset + 11), // upflag
            cursor.getInt(offset + 12), // errorTimes
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // lastDownloadImg
            cursor.getInt(offset + 14) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AdvInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAdvId(cursor.getInt(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImg(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImgPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setVideo(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVideoPath(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setStart_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEnd_time(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreate_at(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUpdate_at(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUpflag(cursor.getInt(offset + 11));
        entity.setErrorTimes(cursor.getInt(offset + 12));
        entity.setLastDownloadImg(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType(cursor.getInt(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(AdvInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(AdvInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(AdvInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
